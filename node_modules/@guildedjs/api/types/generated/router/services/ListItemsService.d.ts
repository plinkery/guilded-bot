import type { ListItem } from "../models/ListItem";
import type { ListItemSummary } from "../models/ListItemSummary";
import { HttpRequest } from "../core/HttpRequest";
export declare class ListItemsService {
    readonly httpRequest: HttpRequest;
    constructor(httpRequest: HttpRequest);
    /**
     * Create a list item
     * @returns any Success
     * @throws ApiError
     */
    listItemCreate({ channelId, requestBody, }: {
        channelId: string;
        requestBody: {
            /**
             * The message of the list item
             */
            message: Record<string, any> | string;
            note?: {
                /**
                 * The note of the list item
                 */
                content: Record<string, any> | string;
            };
        };
    }): Promise<{
        listItem: ListItem;
    }>;
    /**
     * Get list items within a channel
     * @returns any Success
     * @throws ApiError
     */
    listItemReadMany({ channelId }: {
        channelId: string;
    }): Promise<{
        listItems: Array<ListItemSummary>;
    }>;
    /**
     * Get a list item
     * @returns any Success
     * @throws ApiError
     */
    listItemRead({ channelId, listItemId, }: {
        channelId: string;
        listItemId: string;
    }): Promise<{
        listItem: ListItem;
    }>;
    /**
     * [deprecated] Update a list item
     * Deprecating this route in favor of the *patch* route
     * @returns any Success
     * @throws ApiError
     */
    listItemUpdateDeprecated({ channelId, listItemId, requestBody, }: {
        channelId: string;
        listItemId: string;
        requestBody: {
            /**
             * The message of the list item
             */
            message: string;
            note?: {
                /**
                 * The note of the list item
                 */
                content: string;
            } | null;
        };
    }): Promise<{
        listItem: ListItem;
    }>;
    /**
     * Update a list item
     * @returns any Success
     * @throws ApiError
     */
    listItemUpdate({ channelId, listItemId, requestBody, }: {
        channelId: string;
        listItemId: string;
        requestBody: {
            /**
             * The message of the list item
             */
            message?: string;
            note?: {
                /**
                 * The note of the list item
                 */
                content: string;
            } | null;
        };
    }): Promise<{
        listItem: ListItem;
    }>;
    /**
     * Delete a list item
     * @returns void
     * @throws ApiError
     */
    listItemDelete({ channelId, listItemId, }: {
        channelId: string;
        listItemId: string;
    }): Promise<void>;
    /**
     * Complete a list item
     * @returns void
     * @throws ApiError
     */
    listItemCompleteCreate({ channelId, listItemId, }: {
        channelId: string;
        listItemId: string;
    }): Promise<void>;
    /**
     * Uncomplete a list item
     * @returns void
     * @throws ApiError
     */
    listItemCompleteDelete({ channelId, listItemId, }: {
        channelId: string;
        listItemId: string;
    }): Promise<void>;
}
//# sourceMappingURL=ListItemsService.d.ts.map