import type { ServerChannel } from "../models/ServerChannel";
import { HttpRequest } from "../core/HttpRequest";
export declare class ChannelsService {
    readonly httpRequest: HttpRequest;
    constructor(httpRequest: HttpRequest);
    /**
     * Create a channel
     * Only server channels are supported at this time (coming soon™: DM Channels!)
     * @returns any Success
     * @throws ApiError
     */
    channelCreate({ requestBody, }: {
        requestBody: {
            /**
             * The name of the channel
             */
            name: string;
            /**
             * The topic of the channel
             */
            topic?: string;
            /**
             * Whether the channel can be accessed from users who are not member of the server
             */
            isPublic?: boolean;
            /**
             * The type of channel to create
             */
            type: "announcements" | "chat" | "calendar" | "forums" | "media" | "docs" | "voice" | "list" | "scheduling" | "stream";
            /**
             * The server that the channel should be created in. Optional if providing a `groupId` or `categoryId`
             */
            serverId?: string;
            /**
             * The group that the channel should be created in. If not provided, channel will be created in the "Server home" group from `serverId` _or_ in the group that corresponds to the `categoryId` parameter
             */
            groupId?: string;
            /**
             * The category the channel should go in. If not provided, channel will be a top-level channel
             */
            categoryId?: number;
        };
    }): Promise<{
        channel: ServerChannel;
    }>;
    /**
     * Get a channel
     * Only server channels are supported at this time (coming soon™: DM Channels!)
     * @returns any Success
     * @throws ApiError
     */
    channelRead({ channelId }: {
        channelId: string;
    }): Promise<{
        channel: ServerChannel;
    }>;
    /**
     * Update a channel
     * Only server channels are supported at this time (coming soon™: DM Channels!)
     * @returns any Success
     * @throws ApiError
     */
    channelUpdate({ channelId, requestBody, }: {
        channelId: string;
        requestBody: {
            /**
             * The name of the channel or thread
             */
            name?: string;
            /**
             * The topic of the channel. Not applicable to threads
             */
            topic?: string | null;
            /**
             * Whether the channel can be accessed from users who are not member of the server. Not applicable to threads
             */
            isPublic?: boolean;
        };
    }): Promise<{
        channel: ServerChannel;
    }>;
    /**
     * Delete a channel
     * Only server channels are supported at this time (coming soon™: DM Channels!)
     * @returns void
     * @throws ApiError
     */
    channelDelete({ channelId }: {
        channelId: string;
    }): Promise<void>;
}
//# sourceMappingURL=ChannelsService.d.ts.map