export declare const $CalendarEvent: {
    readonly properties: {
        readonly id: {
            readonly type: "number";
            readonly description: "The ID of the calendar event";
            readonly isRequired: true;
            readonly minimum: 1;
        };
        readonly serverId: {
            readonly type: "string";
            readonly description: "The ID of the server";
            readonly isRequired: true;
        };
        readonly channelId: {
            readonly type: "string";
            readonly description: "The ID of the channel";
            readonly isRequired: true;
            readonly format: "uuid";
        };
        readonly name: {
            readonly type: "string";
            readonly description: "The name of the event";
            readonly isRequired: true;
            readonly maxLength: 60;
            readonly minLength: 1;
        };
        readonly description: {
            readonly type: "string";
            readonly description: "The description of the event";
            readonly format: "markdown";
            readonly maxLength: 8000;
            readonly minLength: 1;
        };
        readonly location: {
            readonly type: "string";
            readonly description: "The location of the event";
            readonly maxLength: 8000;
            readonly minLength: 1;
        };
        readonly url: {
            readonly type: "string";
            readonly description: "A URL to associate with the event";
            readonly format: "uri";
        };
        readonly color: {
            readonly type: "number";
            readonly description: "The color of the event when viewing in the calendar";
            readonly maximum: 16777215;
        };
        readonly repeats: {
            readonly type: "boolean";
            readonly description: "Is this event a repeating event";
        };
        readonly seriesId: {
            readonly type: "string";
            readonly description: "The ID of the calendar event series. Only shows if the event is repeating";
            readonly format: "uuid";
        };
        readonly roleIds: {
            readonly type: "array";
            readonly contains: {
                readonly type: "number";
                readonly description: "The ID of the role";
            };
        };
        readonly rsvpDisabled: {
            readonly type: "boolean";
            readonly description: "When disabled, users will not be able to RSVP to the event";
        };
        readonly isAllDay: {
            readonly type: "boolean";
            readonly description: "Does the event last all day";
        };
        readonly rsvpLimit: {
            readonly type: "number";
            readonly description: "The number of RSVPs to allow before waitlisting RSVPs";
            readonly minimum: 1;
        };
        readonly autofillWaitlist: {
            readonly type: "boolean";
            readonly description: "When `rsvpLimit` is set, users from the waitlist will be added as space becomes available in the event";
        };
        readonly startsAt: {
            readonly type: "string";
            readonly description: "The ISO 8601 timestamp that the event starts at";
            readonly isRequired: true;
            readonly format: "date-time";
        };
        readonly duration: {
            readonly type: "number";
            readonly description: "The duration of the event _**in minutes**_";
            readonly minimum: 1;
        };
        readonly isPrivate: {
            readonly type: "boolean";
        };
        readonly mentions: {
            readonly type: "Mentions";
        };
        readonly createdAt: {
            readonly type: "string";
            readonly description: "The ISO 8601 timestamp that the event was created at";
            readonly isRequired: true;
            readonly format: "date-time";
        };
        readonly createdBy: {
            readonly type: "string";
            readonly description: "The ID of the user who created this event";
            readonly isRequired: true;
        };
        readonly cancellation: {
            readonly properties: {
                readonly description: {
                    readonly type: "string";
                    readonly description: "The description of event cancellation";
                    readonly format: "markdown";
                    readonly maxLength: 140;
                    readonly minLength: 1;
                };
                readonly createdBy: {
                    readonly type: "string";
                    readonly description: "The ID of the user who created this event cancellation";
                    readonly isRequired: true;
                };
            };
        };
    };
};
//# sourceMappingURL=$CalendarEvent.d.ts.map