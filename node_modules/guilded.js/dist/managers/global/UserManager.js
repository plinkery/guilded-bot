"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.GlobalUserManager = void 0;
const User_1 = require("../../structures/User");
const CacheableStructManager_1 = require("./CacheableStructManager");
/**
 * A manager for interacting with users. You can retrieve users from the .cache property.
 * At this point in time, Users cache population is heavily reliant on the Member cache.
 * @extends CacheableStructManager
 */
class GlobalUserManager extends CacheableStructManager_1.CacheableStructManager {
    /**
     * Fetches client user.
     * @param force Whether to force a fetch from the API.
     * @returns A Promise that resolves with the fetched user.
     */
    fetchClient(force) {
        if (!force) {
            const existingUser = this.client.users.cache.get(this.client.user.id);
            if (existingUser)
                return Promise.resolve(existingUser);
        }
        return this.client.rest.router.users
            .userRead({ userId: "@me" })
            .then((data) => new User_1.User(this.client, data.user));
    }
}
exports.GlobalUserManager = GlobalUserManager;
//# sourceMappingURL=UserManager.js.map